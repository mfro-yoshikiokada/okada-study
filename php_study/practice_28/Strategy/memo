Strategyとは、「戦略」や「作戦」という意味を持ちます。
この「戦略」や「作戦」毎にクラスを分割して、簡単にそれらを切り替えることができるのが特徴です。
共通のインターフェースを定義し、クラスを使う側（以下クライアント）はそれに伴った処理を実行するので、クライアントは具体的な実装に依存しなくなります。
strategyパターンのクラス図は以下のようなものです。

自分が一番Strategyパターンを使うことで受けたメリットは、if文やswitch文などの複雑な条件分岐をスマートにすることです。
普段であれば場合分けしなければならないところを、「戦略」をクラスに格納することによりコードが非常にシンプルになり可読性や拡張性が上がります。